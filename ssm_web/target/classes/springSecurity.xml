<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd          
    http://www.springframework.org/schema/security          
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!--
        配置拦截的规则
        auto-config="使用自带的页面"
        use-expressions="是否使用spel表达式"，如果使用表达式：hasRole('ROLE_USER')

        hasRole([role])
        当前用户是否拥有指定角色。

        hasAnyRole([role1,role2])
        多个角色是一个以逗号进行分隔的字符串。如果当前用户拥有指定角色中的任意一个则返回true。

        hasAuthority([auth])
        等同于hasRole

        hasAnyAuthority([auth1,auth2])
        等同于hasAnyRole

        Principle
        代表当前用户的principle对象

        authentication
        直接从SecurityContext获取的当前Authentication对象

        permitAll
        总是返回true，表示允许所有的

        denyAll
        总是返回false，表示拒绝所有的

        isAnonymous()
        当前用户是否是一个匿名用户

        isRememberMe()
        表示当前用户是否是通过Remember-Me自动登录的

        isAuthenticated()
        表示当前用户是否已经登录认证成功了。

        isFullyAuthenticated()
        如果当前用户既不是一个匿名用户，同时又不是通过Remember-Me自动登录的，则返回true。
    -->

    <!--配置放行的页面资源-->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/pages/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <!--针对拦截的规则配置
    auto-config="true 表示应用默认的框架配置
    use-expressions="false" 关闭权限框架的表达式
    intercept-url  拦截规则 pattern="/** 拦截所有
    access="ROLE_USER"  必须拥有ROLE_USER角色的用户可以访问
    -->
    <!--权限的控制需要开启对权限框架表达式的支持-->
    <!-- <security:http auto-config="true" use-expressions="false">
         <security:intercept-url pattern="/**" access="ROLE_ADMIN,ROLE_PRODUCT,ROLE_ORDER"/>-->
    <security:http auto-config="true" use-expressions="true">
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_ADMIN','ROLE_PRODUCT','ROLE_ORDER')"/>
        <!--添加节点配置自定义的页面
        login-page 自定义的登录页面
        login-processing-url 表单请求登录的url地址
        default-target-url 登录成功的地址
        authentication-failure-url 登录失败的页面
        -->
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login"
                             default-target-url="/index.jsp"
                             authentication-failure-url="/failer.jsp"
        />
        <!--配置权限不足的页面-->
        <security:access-denied-handler error-page="/403.jsp"/>

        <!--关闭跨域攻击的拦截-->
        <security:csrf disabled="true"/>

        <!--
            配置退出的功能，securiry框架内部提供session
            invalidate-session="true" 清除session中的数据
            logout-url="/logout"    退出功能的请求路径
            logout-success-url="/login.jsp" 退出成功后跳转的页面
        -->
        <security:logout
                invalidate-session="true"
                logout-url="/logout"
                logout-success-url="/login.jsp"
        />

    </security:http>

    <!--验证节点的配置-->
    <!-- 在内存中临时提供用户名和密码的数据 -->
    <security:authentication-manager>
        <!--user-service-ref 表示应用一个自定义的用户业务类 -->
        <!-- 提供服务类，去数据库查询用户名和密码 -->
        <security:authentication-provider user-service-ref="userService">
            <!-- 提供加密方式 -->
            <security:password-encoder ref="passwordEncoder"/>

        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置加密类-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


</beans>